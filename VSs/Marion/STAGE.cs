using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Collections;

namespace Marion
{
    public class STAGE
    {
        //パネルスイッチの初期化
        public int panelsw = 1;
        //描写画像格納関数
        public Bitmap MapImage { get; set; }
        //マス数//
        public const int MapX = 30;
        public const int MapY = 20;
        //判定用マスリスト//
        //public List<System.Windows.Point> HanteiMaps = new List<System.Windows.Point>();
        public System.Windows.Point[] HanteiMaps;
        public int[] HanteiNum;
        //判定用ナンバリング
        public int numbers;
        //マスサイズ//
        public List<Map> Maps { get; private set; } = new List<Map>();
        public int MapChip = 32;
        public int MapChipSegments = 0;

    
        //スプライト上での分割位置設定//
        public Point SpliteCell(int spno)
        {
            int MapChipx=0;
            int MapChipy=0;
            //MapChip分座標を返す
            //参照段//
            //1段目
            if(spno < 10)
            {
                MapChipx = spno * MapChip;
                MapChipy = 0;
            }
            //2段目
            if(spno >= 10&&spno < 20)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 1;
            }
            //3段目
            if (spno >= 20 && spno < 30)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 2;
            }
            //4段目
            if (spno >= 30 && spno < 40)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 3;
            }
            //5段目
            if (spno >= 40 && spno < 50)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 4;
            }
            //6段目
            if (spno >= 50 && spno < 60)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 5;
            }
            //7段目
            if (spno >= 60 && spno < 70)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 6;
            }
            //8段目
            if (spno >= 70 && spno < 80)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 7;
            }
            //9段目
            if (spno >= 80 && spno < 90)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 8;
            }
            //10段目
            if (spno >= 90 && spno < 100)
            {
                MapChipx = (spno % 10) * MapChip;
                MapChipy = MapChip * 9;
            }

            return new Point(MapChipx, MapChipy);

        }
        //マップチップを読み取る
        public Bitmap GetMapChip(int spno)
        {
            // 座標を読み取り.
            var mcpoint = SpliteCell(spno);
            // 座標とサイズを格納.
            Rectangle rect = new Rectangle(mcpoint.X, mcpoint.Y, MapChip, MapChip);
            // 座標とサイズからコピーを作成.
            Bitmap bmpNew = MapImage.Clone(rect, MapImage.PixelFormat);
            // コピーを返す.
            return bmpNew;
        }

        //マップ構造体参照用
        public class Map
        {

            public int[,] MapChips { get; set; }
        }

        

        // ステージパネルを生成
        public Bitmap GetMap(int spno)
        {
            // ステージ構造体を参照
            var mapdata = this.Maps[spno];
            // 横の列数と
            var xLen = mapdata.MapChips.GetLength(1);
            // 縦の行数を格納
            var yLen = mapdata.MapChips.GetLength(0);
            // サイズを決定
            var bmp = new Bitmap(xLen * this.MapChip, yLen * this.MapChip);

            // サイズでグラフィックカプセルを初期
            Graphics g = Graphics.FromImage(bmp);
            //判定用マップマス配列初期化
            HanteiMaps = new System.Windows.Point[MapX*MapY*6];
            //判定用マップマス配列初期化
            HanteiNum = new int[MapX * MapY * 6];
            // 縦の数だけ
            for (int y = 0; y < yLen; y++)
            {
                //横の数だけ
                for (int x = 0; x < xLen; x++)
                {
                    //マップ構造体を参照し該当マスの情報を読み取る
                    var mapchip = this.GetMapChip(mapdata.MapChips[y, x]);
                    //マス情報からマップチップ画像を参照し該当マスに描写
                    g.DrawImage(mapchip, new PointF(x * this.MapChip, y * this.MapChip));
                    //マス情報を読み取り地形(末尾が0以外)なら判定用マップに格納
                    if(mapdata.MapChips[y, x] % 10 != 0)
                    {
                        //スプライト番号格納用変数
                        int Hanteinum;
                        Hanteinum = mapdata.MapChips[y, x];


                        //判定配列にステージ構造体配列のそれぞれのマスの位置に
                        //マップチップとずらし座標を足したものをかけている
                        //ｘはマップパネルの位置ごとにずらす処理を加えている
                        HanteiMaps[numbers] = new System.Windows.Point((x*MapChip+32)+((panelsw-1)*30*32), y*MapChip+32);

                        //スプライト番号の二桁目を格納
                        HanteiNum[numbers] = Hanteinum;
                        numbers++;
                    }
                    else

                    //リソースの開放
                    mapchip.Dispose();
                }
            }
            //リソースの開放
            g.Dispose();
            //ステージパネルを返す
            return bmp;
        }
        // コンストラクター
        public STAGE()
        {
            
        }
        // ステージパネル数参照.
        public enum StagePanel
        {
            //ステージ1
            Stage1panel = 6,
            //ステージ2
            Stage2panel = 6,
            //ステージ3
            Stage3panel = 7,

        }

        ////ステージ構造////
        //横３０　縦２０//
        //ステージ１//
        public void Stage1(int panelswsw)
        {
            // 画像ファイルの場所.
            this.MapImage = (System.Drawing.Bitmap)Bitmap.FromFile(@"C:\Users\USER\source\repos\Marion\Marion\BigMapSplite.bmp");

            //ここからステージ１//
            //////////////////////
                //数値は2桁　1 ⇒ 01
                //宇宙プリセット⇒末尾0 00 10 20 30 40
                //スプライト番号地形定義
                //先頭１⇒左上に空白
                //先頭２⇒左下に空白
                //先頭３⇒右上に空白
                //先頭４⇒右下に空白
            //1枚目//
            var Stage1Chips1 = new int[,] {
                { 00,00,00,00,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 10,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,40,00,00,50,70,00,00,00,00,00,00},
                { 20,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,10,00,60,80,00,00,00,10,00,00},
                { 30,00,00,00,00,00,00,00,00,00,10,00,00,00,00,30,00,00,00,00,00,00,00,00,00,00,30,00,00,00},
                { 00,00,00,00,30,00,00,00,00,00,00,20,00,00,00,00,00,00,10,20,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,30,00,20,00,00,00,40,10,00,00,00,10,20,00,00,00,00,20,30,00,00,00,00,00,00,00,00},
                { 40,20,30,00,00,00,30,40,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10,10,00,10,10,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,40,00,00,00},
                { 20,00,00,00,00,00,00,00,10,10,00,00,00,30,00,00,00,00,00,10,00,00,00,00,00,10,00,00,00,40},
                { 00,00,00,20,00,10,20,00,00,00,00,00,00,00,00,00,10,00,00,00,10,00,00,30,30,00,00,00,00,00},
                { 10,10,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,30,00,00,10,30,00,00,00,10,00,00,00},
                { 00,00,00,00,00,00,00,00,10,00,00,00,00,40,00,10,00,20,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,40,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,30},
                { 00,00,40,00,00,00,00,20,20,00,00,20,30,00,00,00,00,00,00,00,40,10,00,00,00,00,00,00,30,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,10,00,00,00,00,00,00,10,00,00,00,00,00,00,00,20,10},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10,40,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10,40,00,00,00,00,00,00}
            };
            //2枚目//
            var Stage1Chips2 = new int[,] {
                { 21,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01},
                { 00,21,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01},
                { 00,00,00,00,21,01,01,01,01,00,00,00,00,00,00,00,00,21,01,01,00,00,01,01,01,00,00,00,00,00},
                { 00,00,00,00,00,01,01,01,01,00,00,00,00,00,00,00,00,00,21,01,00,00,00,01,01,00,00,00,30,00},
                { 00,00,00,00,00,21,41,01,01,00,00,00,00,00,00,00,00,00,00,01,00,00,00,01,01,00,00,30,30,00},
                { 00,00,00,00,00,00,00,01,01,00,00,00,00,00,00,00,00,00,00,01,01,00,00,01,00,00,00,10,00,00},
                { 00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,00,00,00,00,21,41,00,00,01,00,00,00,20,00,00},
                { 00,00,00,00,00,00,00,01,00,00,00,30,00,20,20,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,40,40,00,00,10,00,00,00,00,10,00,00},
                { 00,00,10,20,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,20,00,00,10,20,30,00,00,00,10,10,30,00,00,00,00,00,10,10,00,10,00,20,00},
                { 00,00,00,00,00,00,20,00,00,10,20,30,00,00,00,10,10,30,00,00,00,00,00,10,10,00,10,00,20,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,40,40,00,00,00,00,00,00,00,00,00},
                { 10,20,00,00,00,00,00,00,40,00,00,00,00,31,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,30,00,00,00,00,00,01,31,00,00,00,00,00,00,00,00,00,20,10,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,00,00,00,00,00,01,00,00,00,00,00,00,00,00,20},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,00,00,00,00,00,01,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,11,01,00,00,00,00,11,01,01,00,00,00,00,01,01,00,00,00,00,00,00,00,00,00},
                { 00,11,01,01,01,01,01,01,01,00,00,00,01,01,01,00,00,00,00,01,01,30,00,10,30,00,00,00,00,00},
                { 11,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01}
            };
            //3枚目//
            var Stage1Chips3 = new int[,] {
                { 00,00,00,00,10,00,01,01,00,00,00,00,00,00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01},
                { 00,10,00,00,00,00,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,21,01,01,00,00,00,00},
                { 00,10,00,00,00,00,00,21,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,10,00,00,00},
                { 00,00,00,00,00,00,00,00,21,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,00,00,00,00},
                { 00,20,00,00,00,00,30,00,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,21,01,10,00,00,00,00,20,00,10,00,00,00,00,00,01,01,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,00,00,40,00,00,00,01,01,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,30,00,00,00,00,00,00,00,21,01,00,00,00,00},
                { 00,00,00,00,00,11,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,01,00,00,00,00},
                { 00,00,00,00,11,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,01,11,01,01,00,00,00,00,10,00,00,00,00,00,11,00,00,00,20,00,00,00,00,00,00,30,10,00},
                { 00,00,01,01,01,01,00,00,00,00,00,00,00,00,00,11,01,00,00,00,00,00,00,00,00,00,20,00,00,00},
                { 00,00,01,01,01,01,40,00,00,00,00,00,00,00,00,01,01,00,00,00,00,10,00,00,00,00,30,00,00,00},
                { 00,00,01,01,01,01,00,00,00,00,00,00,00,00,11,01,00,00,30,00,00,00,00,10,00,00,00,00,20,00},
                { 00,00,01,01,01,01,00,00,00,00,00,00,00,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,11,01,01,01,01,00,00,00,00,00,00,00,11,01,01,00,00,00,00,00,00,01,00,00,00,00,00,00,00},
                { 11,01,01,01,01,01,00,00,00,00,00,00,00,01,01,01,01,00,00,00,00,00,01,01,00,00,00,00,00,00},
                { 01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01},
                { 01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01}
            };
            //4枚目//
            var Stage1Chips4 = new int[,] {
                { 00,00,00,00,10,00,00,00,00,00,00,00,00,00,00,00,00,02,02,00,00,00,00,00,02,02,00,00,00,00},
                { 10,10,00,00,00,00,00,00,10,00,20,00,00,00,00,00,00,02,00,00,00,00,00,00,02,02,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02,00,00,00,00,00},
                { 00,00,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,02,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,02,02,02,00,00,00,02,02,02,02,02,00,00,00,00,00,00,30,00,00,00,00,00,00,00,00,00},
                { 00,00,00,01,02,02,00,00,00,00,02,02,02,00,00,10,00,00,51,91,91,91,71,00,00,00,00,00,00,00},
                { 40,00,00,02,02,02,00,00,40,00,30,02,00,00,00,00,00,00,61,91,91,91,81,00,00,10,00,02,00,00},
                { 00,00,00,02,02,02,00,00,00,00,00,00,00,00,00,00,02,51,91,91,91,91,91,71,00,20,00,02,00,00},
                { 00,00,20,00,02,02,00,00,00,00,00,10,00,00,00,00,00,61,91,91,91,91,91,81,00,00,00,02,00,00},
                { 00,10,00,00,02,00,00,00,00,10,00,00,00,30,00,00,51,91,91,91,91,91,91,91,71,00,02,02,00,00},
                { 00,00,00,00,00,00,00,30,00,00,00,00,00,00,30,00,61,91,91,91,91,91,91,91,81,00,02,00,00,00},
                { 00,00,00,00,00,00,00,51,91,91,71,00,00,00,00,51,91,91,91,91,91,91,91,91,91,71,02,00,00,00},
                { 10,20,30,00,00,00,00,61,91,91,81,00,00,00,00,61,91,91,91,91,91,91,91,91,91,81,00,00,00,00},               
                { 00,00,00,00,00,00,61,91,91,91,91,71,00,61,91,91,91,91,91,91,91,91,91,91,91,91,71,00,10,00},
                { 00,00,20,00,00,51,91,91,91,91,91,81,20,91,91,91,91,91,91,91,91,91,91,91,91,91,81,02,00,00},
                { 00,00,00,00,00,61,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,71,00,00},
                { 00,00,00,00,51,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,81,00,00},
                { 01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01}

            };
            //5枚目//
            var Stage1Chips5 = new int[,] {
                { 00,00,00,00,10,00,00,00,02,02,02,02,00,00,02,02,02,00,00,00,00,00,00,00,02,00,00,00,00,00},
                { 10,10,00,00,00,00,00,00,00,02,02,02,02,00,02,02,02,00,00,00,00,00,02,02,02,02,00,00,00,00},
                { 00,00,51,91,71,00,00,00,00,02,02,02,00,00,00,00,00,00,00,00,00,00,02,02,00,00,00,00,00,00},
                { 00,00,61,91,81,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,02,02,00,00,00,00,00,00,00,30,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,02,02,00,00,00,00,00,40,00,40,00,00,00,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,02,00,00,00,00,00,00,00,00,00,02,02,02,02,02,02,00,00,00,00,00,02,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02,02,00,30,00,30,00,00,00,02,02,00,00,00,00},
                { 00,00,00,00,00,00,20,10,00,40,00,00,00,00,00,02,00,00,00,00,00,00,00,02,02,02,00,00,00,00},
                { 00,00,00,00,02,00,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02,02,02,00,00,00,00},
                { 00,00,00,00,02,02,00,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02,02,00,00,00,00,00},
                { 00,00,02,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00,00,00,40,00,00,02,00,00,00,00,00,00},
                { 00,00,02,02,02,02,00,00,30,00,00,00,00,00,00,00,00,00,10,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,02,02,02,02,00,00,00,00,10,00,00,00,00,00,00,00,00,00,00,00,00,01,00,00,00,00,00,00},
                { 00,00,02,00,02,02,00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,00,01,01,00,00,00,00,00},
                { 00,00,02,00,00,00,00,00,40,00,00,00,00,00,01,00,00,51,91,71,00,00,00,01,01,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,00,00,61,91,81,00,00,01,01,01,00,00,00,00,00},
                { 01,01,01,01,01,01,01,00,00,00,00,00,61,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01},
                { 01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01}
            };
            //6枚目//
            var Stage1Chips6 = new int[,] {
                { 00,00,00,00,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 10,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00},
                { 00,00,00,00,30,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,40,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00,00,30,00,40,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,20,00,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10,40,00,00,30,00,00,00,00,00,00,00,00,00,00},
                { 00,00,40,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
                { 01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00}
            };
            /////////////////////
            //ここまでステージ1//

            // 返すステージパネルの決定.
            switch (panelswsw)
            {

                case 1:
                    {
                        this.Maps.Add(new Map() { MapChips = Stage1Chips1 });
                        break;
                    }
                case 2:
                    {
                        this.Maps.Add(new Map() { MapChips = Stage1Chips2 });
                        break;
                    }
                case 3:
                    {
                        this.Maps.Add(new Map() { MapChips = Stage1Chips3 });
                        break;
                    }
                case 4:
                    {
                        this.Maps.Add(new Map() { MapChips = Stage1Chips4 });
                        break;
                    }
                case 5:
                    {
                        this.Maps.Add(new Map() { MapChips = Stage1Chips5 });
                        break;
                    }
                case 6:
                    {
                        this.Maps.Add(new Map() { MapChips = Stage1Chips6 });
                        break;
                    }

            }
            panelsw = panelswsw;

            
        }
        //class終わり
    }
    //namespaceおわり
}
